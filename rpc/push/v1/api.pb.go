// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.2
// 	protoc        (unknown)
// source: push/v1/api.proto

package v1_pushv1

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	anypb "google.golang.org/protobuf/types/known/anypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Types of event formats like JSON
type Event_Type int32

const (
	// default type is JSON
	Event_TYPE_JSON_UNSPECIFIED Event_Type = 0
	// proto type
	Event_TYPE_PROTO Event_Type = 1
)

// Enum value maps for Event_Type.
var (
	Event_Type_name = map[int32]string{
		0: "TYPE_JSON_UNSPECIFIED",
		1: "TYPE_PROTO",
	}
	Event_Type_value = map[string]int32{
		"TYPE_JSON_UNSPECIFIED": 0,
		"TYPE_PROTO":            1,
	}
)

func (x Event_Type) Enum() *Event_Type {
	p := new(Event_Type)
	*p = x
	return p
}

func (x Event_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Event_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_push_v1_api_proto_enumTypes[0].Descriptor()
}

func (Event_Type) Type() protoreflect.EnumType {
	return &file_push_v1_api_proto_enumTypes[0]
}

func (x Event_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Event_Type.Descriptor instead.
func (Event_Type) EnumDescriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{19, 0}
}

// ChannelRequest is the channel request holder
type ChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*ChannelRequest_ChannelEvent
	//	*ChannelRequest_ChannelEventAck
	//	*ChannelRequest_TopicSubscriptionRequest
	//	*ChannelRequest_TopicUnsubscriptionRequest
	Request isChannelRequest_Request `protobuf_oneof:"request"`
}

func (x *ChannelRequest) Reset() {
	*x = ChannelRequest{}
	mi := &file_push_v1_api_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelRequest) ProtoMessage() {}

func (x *ChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelRequest.ProtoReflect.Descriptor instead.
func (*ChannelRequest) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{0}
}

func (m *ChannelRequest) GetRequest() isChannelRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ChannelRequest) GetChannelEvent() *ChannelEvent {
	if x, ok := x.GetRequest().(*ChannelRequest_ChannelEvent); ok {
		return x.ChannelEvent
	}
	return nil
}

func (x *ChannelRequest) GetChannelEventAck() *ChannelEventAck {
	if x, ok := x.GetRequest().(*ChannelRequest_ChannelEventAck); ok {
		return x.ChannelEventAck
	}
	return nil
}

func (x *ChannelRequest) GetTopicSubscriptionRequest() *TopicSubscriptionRequest {
	if x, ok := x.GetRequest().(*ChannelRequest_TopicSubscriptionRequest); ok {
		return x.TopicSubscriptionRequest
	}
	return nil
}

func (x *ChannelRequest) GetTopicUnsubscriptionRequest() *TopicUnsubscriptionRequest {
	if x, ok := x.GetRequest().(*ChannelRequest_TopicUnsubscriptionRequest); ok {
		return x.TopicUnsubscriptionRequest
	}
	return nil
}

type isChannelRequest_Request interface {
	isChannelRequest_Request()
}

type ChannelRequest_ChannelEvent struct {
	// channel_event carries main payload
	ChannelEvent *ChannelEvent `protobuf:"bytes,1,opt,name=channel_event,json=channelEvent,proto3,oneof"`
}

type ChannelRequest_ChannelEventAck struct {
	// channel_event_ack is ack of channel_event
	ChannelEventAck *ChannelEventAck `protobuf:"bytes,2,opt,name=channel_event_ack,json=channelEventAck,proto3,oneof"`
}

type ChannelRequest_TopicSubscriptionRequest struct {
	// topic_subscription_request to subscribe to a topic
	TopicSubscriptionRequest *TopicSubscriptionRequest `protobuf:"bytes,3,opt,name=topic_subscription_request,json=topicSubscriptionRequest,proto3,oneof"`
}

type ChannelRequest_TopicUnsubscriptionRequest struct {
	// topic_unsubscription_request to unsubscribe to a topic
	TopicUnsubscriptionRequest *TopicUnsubscriptionRequest `protobuf:"bytes,4,opt,name=topic_unsubscription_request,json=topicUnsubscriptionRequest,proto3,oneof"`
}

func (*ChannelRequest_ChannelEvent) isChannelRequest_Request() {}

func (*ChannelRequest_ChannelEventAck) isChannelRequest_Request() {}

func (*ChannelRequest_TopicSubscriptionRequest) isChannelRequest_Request() {}

func (*ChannelRequest_TopicUnsubscriptionRequest) isChannelRequest_Request() {}

// ChannelResponse is the channel response holder
type ChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ChannelResponse_ConnectAck
	//	*ChannelResponse_ChannelEvent
	//	*ChannelResponse_ChannelEventAck
	//	*ChannelResponse_TopicSubscriptionRequestAck
	//	*ChannelResponse_TopicUnsubscriptionRequestAck
	Response isChannelResponse_Response `protobuf_oneof:"response"`
}

func (x *ChannelResponse) Reset() {
	*x = ChannelResponse{}
	mi := &file_push_v1_api_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelResponse) ProtoMessage() {}

func (x *ChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelResponse.ProtoReflect.Descriptor instead.
func (*ChannelResponse) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{1}
}

func (m *ChannelResponse) GetResponse() isChannelResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ChannelResponse) GetConnectAck() *ConnectAck {
	if x, ok := x.GetResponse().(*ChannelResponse_ConnectAck); ok {
		return x.ConnectAck
	}
	return nil
}

func (x *ChannelResponse) GetChannelEvent() *ChannelEvent {
	if x, ok := x.GetResponse().(*ChannelResponse_ChannelEvent); ok {
		return x.ChannelEvent
	}
	return nil
}

func (x *ChannelResponse) GetChannelEventAck() *ChannelEventAck {
	if x, ok := x.GetResponse().(*ChannelResponse_ChannelEventAck); ok {
		return x.ChannelEventAck
	}
	return nil
}

func (x *ChannelResponse) GetTopicSubscriptionRequestAck() *TopicSubscriptionRequestAck {
	if x, ok := x.GetResponse().(*ChannelResponse_TopicSubscriptionRequestAck); ok {
		return x.TopicSubscriptionRequestAck
	}
	return nil
}

func (x *ChannelResponse) GetTopicUnsubscriptionRequestAck() *TopicUnsubscriptionRequestAck {
	if x, ok := x.GetResponse().(*ChannelResponse_TopicUnsubscriptionRequestAck); ok {
		return x.TopicUnsubscriptionRequestAck
	}
	return nil
}

type isChannelResponse_Response interface {
	isChannelResponse_Response()
}

type ChannelResponse_ConnectAck struct {
	// connect_ack is the ack for channel connect request
	ConnectAck *ConnectAck `protobuf:"bytes,1,opt,name=connect_ack,json=connectAck,proto3,oneof"`
}

type ChannelResponse_ChannelEvent struct {
	// channel_event carries main payload
	ChannelEvent *ChannelEvent `protobuf:"bytes,2,opt,name=channel_event,json=channelEvent,proto3,oneof"`
}

type ChannelResponse_ChannelEventAck struct {
	// channel_event_ack is ack of channel_event
	ChannelEventAck *ChannelEventAck `protobuf:"bytes,3,opt,name=channel_event_ack,json=channelEventAck,proto3,oneof"`
}

type ChannelResponse_TopicSubscriptionRequestAck struct {
	// topic_subscription_request_ack is ack of topic_subscription_request
	TopicSubscriptionRequestAck *TopicSubscriptionRequestAck `protobuf:"bytes,4,opt,name=topic_subscription_request_ack,json=topicSubscriptionRequestAck,proto3,oneof"`
}

type ChannelResponse_TopicUnsubscriptionRequestAck struct {
	// topic_unsubscription_request_ack is ack of topic_unsubscription_request
	TopicUnsubscriptionRequestAck *TopicUnsubscriptionRequestAck `protobuf:"bytes,5,opt,name=topic_unsubscription_request_ack,json=topicUnsubscriptionRequestAck,proto3,oneof"`
}

func (*ChannelResponse_ConnectAck) isChannelResponse_Response() {}

func (*ChannelResponse_ChannelEvent) isChannelResponse_Response() {}

func (*ChannelResponse_ChannelEventAck) isChannelResponse_Response() {}

func (*ChannelResponse_TopicSubscriptionRequestAck) isChannelResponse_Response() {}

func (*ChannelResponse_TopicUnsubscriptionRequestAck) isChannelResponse_Response() {}

// ChannelEvent is the main payload
type ChannelEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique event id
	UniqueId string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	// Topic of the event
	Topic string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	// event sent and received
	Event *Event `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *ChannelEvent) Reset() {
	*x = ChannelEvent{}
	mi := &file_push_v1_api_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelEvent) ProtoMessage() {}

func (x *ChannelEvent) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelEvent.ProtoReflect.Descriptor instead.
func (*ChannelEvent) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{2}
}

func (x *ChannelEvent) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ChannelEvent) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *ChannelEvent) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// ConnectResponse is the response client gets on connecting to channel
type ConnectAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Represents a generic Response which indicates success/failure status of every request
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ConnectAck) Reset() {
	*x = ConnectAck{}
	mi := &file_push_v1_api_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConnectAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectAck) ProtoMessage() {}

func (x *ConnectAck) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectAck.ProtoReflect.Descriptor instead.
func (*ConnectAck) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{3}
}

func (x *ConnectAck) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// ChannelEventAck is the ack of a ChannelEvent
type ChannelEventAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique event id
	UniqueId string `protobuf:"bytes,1,opt,name=unique_id,json=uniqueId,proto3" json:"unique_id,omitempty"`
	// generic response which indicates success/failure status of every request
	Status *ResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *ChannelEventAck) Reset() {
	*x = ChannelEventAck{}
	mi := &file_push_v1_api_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ChannelEventAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChannelEventAck) ProtoMessage() {}

func (x *ChannelEventAck) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChannelEventAck.ProtoReflect.Descriptor instead.
func (*ChannelEventAck) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{4}
}

func (x *ChannelEventAck) GetUniqueId() string {
	if x != nil {
		return x.UniqueId
	}
	return ""
}

func (x *ChannelEventAck) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// TopicSubscriptionRequest
type TopicSubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// topic to subscribe
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *TopicSubscriptionRequest) Reset() {
	*x = TopicSubscriptionRequest{}
	mi := &file_push_v1_api_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicSubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSubscriptionRequest) ProtoMessage() {}

func (x *TopicSubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSubscriptionRequest.ProtoReflect.Descriptor instead.
func (*TopicSubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{5}
}

func (x *TopicSubscriptionRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// TopicSubscriptionRequest
type TopicSubscriptionRequestAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// topic
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// generic response which indicates success/failure status of every request
	Status *ResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TopicSubscriptionRequestAck) Reset() {
	*x = TopicSubscriptionRequestAck{}
	mi := &file_push_v1_api_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicSubscriptionRequestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicSubscriptionRequestAck) ProtoMessage() {}

func (x *TopicSubscriptionRequestAck) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicSubscriptionRequestAck.ProtoReflect.Descriptor instead.
func (*TopicSubscriptionRequestAck) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{6}
}

func (x *TopicSubscriptionRequestAck) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TopicSubscriptionRequestAck) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// TopicUnsubscriptionRequest
type TopicUnsubscriptionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// topic to unsubscribe
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *TopicUnsubscriptionRequest) Reset() {
	*x = TopicUnsubscriptionRequest{}
	mi := &file_push_v1_api_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicUnsubscriptionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicUnsubscriptionRequest) ProtoMessage() {}

func (x *TopicUnsubscriptionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicUnsubscriptionRequest.ProtoReflect.Descriptor instead.
func (*TopicUnsubscriptionRequest) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{7}
}

func (x *TopicUnsubscriptionRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

// TopicUnsubscriptionRequestAck
type TopicUnsubscriptionRequestAck struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// topic
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// generic response which indicates success/failure status of every request
	Status *ResponseStatus `protobuf:"bytes,2,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *TopicUnsubscriptionRequestAck) Reset() {
	*x = TopicUnsubscriptionRequestAck{}
	mi := &file_push_v1_api_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TopicUnsubscriptionRequestAck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TopicUnsubscriptionRequestAck) ProtoMessage() {}

func (x *TopicUnsubscriptionRequestAck) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TopicUnsubscriptionRequestAck.ProtoReflect.Descriptor instead.
func (*TopicUnsubscriptionRequestAck) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{8}
}

func (x *TopicUnsubscriptionRequestAck) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *TopicUnsubscriptionRequestAck) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// GetClientActiveDevicesRequest is the request to get active devices of a client
type GetClientActiveDevicesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// client_id for which devices to fetch devices
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
}

func (x *GetClientActiveDevicesRequest) Reset() {
	*x = GetClientActiveDevicesRequest{}
	mi := &file_push_v1_api_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientActiveDevicesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientActiveDevicesRequest) ProtoMessage() {}

func (x *GetClientActiveDevicesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientActiveDevicesRequest.ProtoReflect.Descriptor instead.
func (*GetClientActiveDevicesRequest) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{9}
}

func (x *GetClientActiveDevicesRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

// GetClientActiveDevicesResponse is the response of GetClientActiveDevices API
type GetClientActiveDevicesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// generic response which indicates success/failure status of every request
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
	// is_client_online is a boolean to indicate if the client is online
	IsClientOnline bool `protobuf:"varint,2,opt,name=is_client_online,json=isClientOnline,proto3" json:"is_client_online,omitempty"`
	// list of active devices of a client
	Devices []*Device `protobuf:"bytes,3,rep,name=devices,proto3" json:"devices,omitempty"`
}

func (x *GetClientActiveDevicesResponse) Reset() {
	*x = GetClientActiveDevicesResponse{}
	mi := &file_push_v1_api_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetClientActiveDevicesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetClientActiveDevicesResponse) ProtoMessage() {}

func (x *GetClientActiveDevicesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetClientActiveDevicesResponse.ProtoReflect.Descriptor instead.
func (*GetClientActiveDevicesResponse) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{10}
}

func (x *GetClientActiveDevicesResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *GetClientActiveDevicesResponse) GetIsClientOnline() bool {
	if x != nil {
		return x.IsClientOnline
	}
	return false
}

func (x *GetClientActiveDevicesResponse) GetDevices() []*Device {
	if x != nil {
		return x.Devices
	}
	return nil
}

// SendEventToClientChannelRequest is the request to send event to a client
type SendEventToClientChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// client_id is client id to which the event is to be sent
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// event sent or received
	Event *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *SendEventToClientChannelRequest) Reset() {
	*x = SendEventToClientChannelRequest{}
	mi := &file_push_v1_api_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEventToClientChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventToClientChannelRequest) ProtoMessage() {}

func (x *SendEventToClientChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventToClientChannelRequest.ProtoReflect.Descriptor instead.
func (*SendEventToClientChannelRequest) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{11}
}

func (x *SendEventToClientChannelRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SendEventToClientChannelRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// SendEventToClientChannelResponse is the response of SendEventToClientChannel API
type SendEventToClientChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// generic response which indicates success/failure status of every request
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SendEventToClientChannelResponse) Reset() {
	*x = SendEventToClientChannelResponse{}
	mi := &file_push_v1_api_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEventToClientChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventToClientChannelResponse) ProtoMessage() {}

func (x *SendEventToClientChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventToClientChannelResponse.ProtoReflect.Descriptor instead.
func (*SendEventToClientChannelResponse) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{12}
}

func (x *SendEventToClientChannelResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// SendEventToClientDeviceChannelRequest is the request to send event to a client with a device
type SendEventToClientDeviceChannelRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// client_id is client id to which the event is to be sent
	ClientId string `protobuf:"bytes,1,opt,name=client_id,json=clientId,proto3" json:"client_id,omitempty"`
	// device_id is the device id to which the event is to be sent
	DeviceId string `protobuf:"bytes,2,opt,name=device_id,json=deviceId,proto3" json:"device_id,omitempty"`
	// event sent or received
	Event *Event `protobuf:"bytes,3,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *SendEventToClientDeviceChannelRequest) Reset() {
	*x = SendEventToClientDeviceChannelRequest{}
	mi := &file_push_v1_api_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEventToClientDeviceChannelRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventToClientDeviceChannelRequest) ProtoMessage() {}

func (x *SendEventToClientDeviceChannelRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventToClientDeviceChannelRequest.ProtoReflect.Descriptor instead.
func (*SendEventToClientDeviceChannelRequest) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{13}
}

func (x *SendEventToClientDeviceChannelRequest) GetClientId() string {
	if x != nil {
		return x.ClientId
	}
	return ""
}

func (x *SendEventToClientDeviceChannelRequest) GetDeviceId() string {
	if x != nil {
		return x.DeviceId
	}
	return ""
}

func (x *SendEventToClientDeviceChannelRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// SendEventToClientDeviceChannelResponse is the response of SendEventToClientDeviceChannel API
type SendEventToClientDeviceChannelResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// generic response which indicates success/failure status of every request
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SendEventToClientDeviceChannelResponse) Reset() {
	*x = SendEventToClientDeviceChannelResponse{}
	mi := &file_push_v1_api_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEventToClientDeviceChannelResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventToClientDeviceChannelResponse) ProtoMessage() {}

func (x *SendEventToClientDeviceChannelResponse) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventToClientDeviceChannelResponse.ProtoReflect.Descriptor instead.
func (*SendEventToClientDeviceChannelResponse) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{14}
}

func (x *SendEventToClientDeviceChannelResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// SendEventToTopicRequest is the request to send event to a topic
type SendEventToTopicRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// topic to which the event is to be sent
	Topic string `protobuf:"bytes,1,opt,name=topic,proto3" json:"topic,omitempty"`
	// event sent or received
	Event *Event `protobuf:"bytes,2,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *SendEventToTopicRequest) Reset() {
	*x = SendEventToTopicRequest{}
	mi := &file_push_v1_api_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEventToTopicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventToTopicRequest) ProtoMessage() {}

func (x *SendEventToTopicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventToTopicRequest.ProtoReflect.Descriptor instead.
func (*SendEventToTopicRequest) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{15}
}

func (x *SendEventToTopicRequest) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

func (x *SendEventToTopicRequest) GetEvent() *Event {
	if x != nil {
		return x.Event
	}
	return nil
}

// SendEventToTopicResponse is the response of SendEventToTopic API
type SendEventToTopicResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// generic response which indicates success/failure status of every request
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SendEventToTopicResponse) Reset() {
	*x = SendEventToTopicResponse{}
	mi := &file_push_v1_api_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEventToTopicResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventToTopicResponse) ProtoMessage() {}

func (x *SendEventToTopicResponse) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventToTopicResponse.ProtoReflect.Descriptor instead.
func (*SendEventToTopicResponse) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{16}
}

func (x *SendEventToTopicResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// SendEventToTopicsRequest is the request to send event to multiple topics
type SendEventToTopicsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// list of SendEventToTopicRequest
	Requests []*SendEventToTopicRequest `protobuf:"bytes,1,rep,name=requests,proto3" json:"requests,omitempty"`
}

func (x *SendEventToTopicsRequest) Reset() {
	*x = SendEventToTopicsRequest{}
	mi := &file_push_v1_api_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEventToTopicsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventToTopicsRequest) ProtoMessage() {}

func (x *SendEventToTopicsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventToTopicsRequest.ProtoReflect.Descriptor instead.
func (*SendEventToTopicsRequest) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{17}
}

func (x *SendEventToTopicsRequest) GetRequests() []*SendEventToTopicRequest {
	if x != nil {
		return x.Requests
	}
	return nil
}

// SendEventToTopicsResponse is the response of SendEventToTopics API
type SendEventToTopicsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// generic response which indicates success/failure status of every request
	Status *ResponseStatus `protobuf:"bytes,1,opt,name=status,proto3" json:"status,omitempty"`
}

func (x *SendEventToTopicsResponse) Reset() {
	*x = SendEventToTopicsResponse{}
	mi := &file_push_v1_api_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SendEventToTopicsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SendEventToTopicsResponse) ProtoMessage() {}

func (x *SendEventToTopicsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SendEventToTopicsResponse.ProtoReflect.Descriptor instead.
func (*SendEventToTopicsResponse) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{18}
}

func (x *SendEventToTopicsResponse) GetStatus() *ResponseStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

// Event holds the event structure
type Event struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// name of the event
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// format_type is type of event format
	FormatType Event_Type `protobuf:"varint,2,opt,name=format_type,json=formatType,proto3,enum=push.v1.Event_Type" json:"format_type,omitempty"`
	// data which the event carries
	Data *anypb.Any `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *Event) Reset() {
	*x = Event{}
	mi := &file_push_v1_api_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Event) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Event) ProtoMessage() {}

func (x *Event) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Event.ProtoReflect.Descriptor instead.
func (*Event) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{19}
}

func (x *Event) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Event) GetFormatType() Event_Type {
	if x != nil {
		return x.FormatType
	}
	return Event_TYPE_JSON_UNSPECIFIED
}

func (x *Event) GetData() *anypb.Any {
	if x != nil {
		return x.Data
	}
	return nil
}

// Represents a generic Response which indicates success/failure status of every request
type ResponseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Indicates whether the request was successful or not
	Success bool `protobuf:"varint,1,opt,name=success,proto3" json:"success,omitempty"`
	// Indicates the error code associated with the request if it was unsuccessful
	ErrorCode string `protobuf:"bytes,2,opt,name=error_code,json=errorCode,proto3" json:"error_code,omitempty"`
	// Includes additional meta information associated with the unsuccessful request
	Message map[string]string `protobuf:"bytes,3,rep,name=message,proto3" json:"message,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Indicates the standard grpc error code associated with the request if it was unsuccessful
	ErrorType string `protobuf:"bytes,4,opt,name=error_type,json=errorType,proto3" json:"error_type,omitempty"`
}

func (x *ResponseStatus) Reset() {
	*x = ResponseStatus{}
	mi := &file_push_v1_api_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ResponseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResponseStatus) ProtoMessage() {}

func (x *ResponseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResponseStatus.ProtoReflect.Descriptor instead.
func (*ResponseStatus) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{20}
}

func (x *ResponseStatus) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *ResponseStatus) GetErrorCode() string {
	if x != nil {
		return x.ErrorCode
	}
	return ""
}

func (x *ResponseStatus) GetMessage() map[string]string {
	if x != nil {
		return x.Message
	}
	return nil
}

func (x *ResponseStatus) GetErrorType() string {
	if x != nil {
		return x.ErrorType
	}
	return ""
}

// Device holds details of a device
type Device struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// unique device id
	Id string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	// logged in time
	LoggedInAt *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=logged_in_at,json=loggedInAt,proto3" json:"logged_in_at,omitempty"`
	// device attributes
	Attributes map[string]string `protobuf:"bytes,3,rep,name=attributes,proto3" json:"attributes,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *Device) Reset() {
	*x = Device{}
	mi := &file_push_v1_api_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Device) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Device) ProtoMessage() {}

func (x *Device) ProtoReflect() protoreflect.Message {
	mi := &file_push_v1_api_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Device.ProtoReflect.Descriptor instead.
func (*Device) Descriptor() ([]byte, []int) {
	return file_push_v1_api_proto_rawDescGZIP(), []int{21}
}

func (x *Device) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *Device) GetLoggedInAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LoggedInAt
	}
	return nil
}

func (x *Device) GetAttributes() map[string]string {
	if x != nil {
		return x.Attributes
	}
	return nil
}

var File_push_v1_api_proto protoreflect.FileDescriptor

var file_push_v1_api_proto_rawDesc = []byte{
	0x0a, 0x11, 0x70, 0x75, 0x73, 0x68, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x70, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x07, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x1a, 0x1f, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x19, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x61,
	0x6e, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xed, 0x02, 0x0a, 0x0e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x0d, 0x63,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00,
	0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x6b, 0x12, 0x61, 0x0a, 0x1a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63,
	0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x67, 0x0a, 0x1c, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x5f, 0x75, 0x6e,
	0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x70, 0x75, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x1a, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xbb, 0x03, 0x0a, 0x0f, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x36, 0x0a, 0x0b,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x13, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x41, 0x63, 0x6b, 0x12, 0x3c, 0x0a, 0x0d, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f,
	0x65, 0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x70, 0x75,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x5f, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x0f, 0x63, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x6b, 0x0a, 0x1e, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x5f, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x1b, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x71, 0x0a, 0x20, 0x74, 0x6f, 0x70, 0x69, 0x63,
	0x5f, 0x75, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x6f, 0x70, 0x69,
	0x63, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x48, 0x00, 0x52, 0x1d, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x67, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65,
	0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75,
	0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x3d, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x5f,
	0x0a, 0x0f, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x41, 0x63,
	0x6b, 0x12, 0x1b, 0x0a, 0x09, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x6e, 0x69, 0x71, 0x75, 0x65, 0x49, 0x64, 0x12, 0x2f,
	0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22,
	0x30, 0x0a, 0x18, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74,
	0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69,
	0x63, 0x22, 0x64, 0x0a, 0x1b, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b,
	0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x32, 0x0a, 0x1a, 0x54, 0x6f, 0x70, 0x69, 0x63,
	0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x22, 0x66, 0x0a, 0x1d, 0x54,
	0x6f, 0x70, 0x69, 0x63, 0x55, 0x6e, 0x73, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x6b, 0x12, 0x14, 0x0a, 0x05,
	0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70,
	0x69, 0x63, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x22, 0x3c, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49,
	0x64, 0x22, 0xa6, 0x01, 0x0a, 0x1e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x28, 0x0a, 0x10, 0x69, 0x73, 0x5f, 0x63, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x5f, 0x6f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0e, 0x69, 0x73, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4f, 0x6e, 0x6c, 0x69, 0x6e, 0x65, 0x12,
	0x29, 0x0a, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x52, 0x07, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x22, 0x64, 0x0a, 0x1f, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43,
	0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1b, 0x0a,
	0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x75, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x22, 0x53, 0x0a, 0x20, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43,
	0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x87, 0x01, 0x0a, 0x25, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63,
	0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x1b, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12, 0x1b, 0x0a, 0x09,
	0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x64, 0x12, 0x24, 0x0a, 0x05, 0x65, 0x76, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x22,
	0x59, 0x0a, 0x26, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x75, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x55, 0x0a, 0x17, 0x53, 0x65,
	0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x24, 0x0a, 0x05, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x70, 0x75, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x05, 0x65, 0x76, 0x65, 0x6e,
	0x74, 0x22, 0x4b, 0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a,
	0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e,
	0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0x58,
	0x0a, 0x18, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x08, 0x72, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x70,
	0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x6f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x08,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x73, 0x22, 0x4c, 0x0a, 0x19, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2f, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06,
	0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xae, 0x01, 0x0a, 0x05, 0x45, 0x76, 0x65, 0x6e, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x70, 0x75, 0x73, 0x68,
	0x2e, 0x76, 0x31, 0x2e, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6e, 0x79, 0x52, 0x04,
	0x64, 0x61, 0x74, 0x61, 0x22, 0x31, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x19, 0x0a, 0x15,
	0x54, 0x59, 0x50, 0x45, 0x5f, 0x4a, 0x53, 0x4f, 0x4e, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x54, 0x59, 0x50, 0x45, 0x5f,
	0x50, 0x52, 0x4f, 0x54, 0x4f, 0x10, 0x01, 0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x5f, 0x74, 0x79, 0x70,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x3a, 0x0a, 0x0c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xd6,
	0x01, 0x0a, 0x06, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x3c, 0x0a, 0x0c, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x5f, 0x69, 0x6e, 0x5f, 0x61, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a, 0x6c, 0x6f, 0x67,
	0x67, 0x65, 0x64, 0x49, 0x6e, 0x41, 0x74, 0x12, 0x3f, 0x0a, 0x0a, 0x61, 0x74, 0x74, 0x72, 0x69,
	0x62, 0x75, 0x74, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x75,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x41, 0x74, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0a, 0x61, 0x74,
	0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x1a, 0x3d, 0x0a, 0x0f, 0x41, 0x74, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x32, 0xf0, 0x04, 0x0a, 0x0b, 0x50, 0x75, 0x73, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x42, 0x0a, 0x07, 0x43, 0x68, 0x61, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x17, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x18, 0x2e, 0x70, 0x75,
	0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x30, 0x01, 0x12, 0x71, 0x0a, 0x18, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x28, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x29, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x68, 0x61,
	0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x83,
	0x01, 0x0a, 0x1e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65,
	0x6c, 0x12, 0x2e, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x2f, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64,
	0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x6e, 0x65, 0x6c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x22, 0x00, 0x12, 0x59, 0x0a, 0x10, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x12, 0x20, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x21, 0x2e, 0x70, 0x75, 0x73,
	0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f,
	0x54, 0x6f, 0x70, 0x69, 0x63, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12,
	0x5c, 0x0a, 0x11, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x6f,
	0x70, 0x69, 0x63, 0x73, 0x12, 0x21, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x53,
	0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x6f, 0x70, 0x69, 0x63, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x6e, 0x64, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x54, 0x6f, 0x54, 0x6f, 0x70,
	0x69, 0x63, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x6b, 0x0a,
	0x16, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x12, 0x26, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76,
	0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x27, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x42, 0x89, 0x01, 0x0a, 0x11, 0x63,
	0x6c, 0x75, 0x62, 0x2e, 0x63, 0x72, 0x65, 0x64, 0x2e, 0x70, 0x75, 0x73, 0x68, 0x2e, 0x76, 0x31,
	0x42, 0x08, 0x41, 0x70, 0x69, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x2d, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x43, 0x52, 0x45, 0x44, 0x2d, 0x43, 0x4c,
	0x55, 0x42, 0x2f, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x6c, 0x6c, 0x65, 0x72, 0x2f, 0x70, 0x75, 0x73,
	0x68, 0x2f, 0x76, 0x31, 0x3a, 0x70, 0x75, 0x73, 0x68, 0x76, 0x31, 0xa2, 0x02, 0x03, 0x50, 0x58,
	0x58, 0xaa, 0x02, 0x07, 0x50, 0x75, 0x73, 0x68, 0x2e, 0x56, 0x31, 0xca, 0x02, 0x07, 0x50, 0x75,
	0x73, 0x68, 0x5c, 0x56, 0x31, 0xe2, 0x02, 0x13, 0x50, 0x75, 0x73, 0x68, 0x5c, 0x56, 0x31, 0x5c,
	0x47, 0x50, 0x42, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0xea, 0x02, 0x08, 0x50, 0x75,
	0x73, 0x68, 0x3a, 0x3a, 0x56, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_push_v1_api_proto_rawDescOnce sync.Once
	file_push_v1_api_proto_rawDescData = file_push_v1_api_proto_rawDesc
)

func file_push_v1_api_proto_rawDescGZIP() []byte {
	file_push_v1_api_proto_rawDescOnce.Do(func() {
		file_push_v1_api_proto_rawDescData = protoimpl.X.CompressGZIP(file_push_v1_api_proto_rawDescData)
	})
	return file_push_v1_api_proto_rawDescData
}

var file_push_v1_api_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_push_v1_api_proto_msgTypes = make([]protoimpl.MessageInfo, 24)
var file_push_v1_api_proto_goTypes = []any{
	(Event_Type)(0),                                // 0: push.v1.Event.Type
	(*ChannelRequest)(nil),                         // 1: push.v1.ChannelRequest
	(*ChannelResponse)(nil),                        // 2: push.v1.ChannelResponse
	(*ChannelEvent)(nil),                           // 3: push.v1.ChannelEvent
	(*ConnectAck)(nil),                             // 4: push.v1.ConnectAck
	(*ChannelEventAck)(nil),                        // 5: push.v1.ChannelEventAck
	(*TopicSubscriptionRequest)(nil),               // 6: push.v1.TopicSubscriptionRequest
	(*TopicSubscriptionRequestAck)(nil),            // 7: push.v1.TopicSubscriptionRequestAck
	(*TopicUnsubscriptionRequest)(nil),             // 8: push.v1.TopicUnsubscriptionRequest
	(*TopicUnsubscriptionRequestAck)(nil),          // 9: push.v1.TopicUnsubscriptionRequestAck
	(*GetClientActiveDevicesRequest)(nil),          // 10: push.v1.GetClientActiveDevicesRequest
	(*GetClientActiveDevicesResponse)(nil),         // 11: push.v1.GetClientActiveDevicesResponse
	(*SendEventToClientChannelRequest)(nil),        // 12: push.v1.SendEventToClientChannelRequest
	(*SendEventToClientChannelResponse)(nil),       // 13: push.v1.SendEventToClientChannelResponse
	(*SendEventToClientDeviceChannelRequest)(nil),  // 14: push.v1.SendEventToClientDeviceChannelRequest
	(*SendEventToClientDeviceChannelResponse)(nil), // 15: push.v1.SendEventToClientDeviceChannelResponse
	(*SendEventToTopicRequest)(nil),                // 16: push.v1.SendEventToTopicRequest
	(*SendEventToTopicResponse)(nil),               // 17: push.v1.SendEventToTopicResponse
	(*SendEventToTopicsRequest)(nil),               // 18: push.v1.SendEventToTopicsRequest
	(*SendEventToTopicsResponse)(nil),              // 19: push.v1.SendEventToTopicsResponse
	(*Event)(nil),                                  // 20: push.v1.Event
	(*ResponseStatus)(nil),                         // 21: push.v1.ResponseStatus
	(*Device)(nil),                                 // 22: push.v1.Device
	nil,                                            // 23: push.v1.ResponseStatus.MessageEntry
	nil,                                            // 24: push.v1.Device.AttributesEntry
	(*anypb.Any)(nil),                              // 25: google.protobuf.Any
	(*timestamppb.Timestamp)(nil),                  // 26: google.protobuf.Timestamp
}
var file_push_v1_api_proto_depIdxs = []int32{
	3,  // 0: push.v1.ChannelRequest.channel_event:type_name -> push.v1.ChannelEvent
	5,  // 1: push.v1.ChannelRequest.channel_event_ack:type_name -> push.v1.ChannelEventAck
	6,  // 2: push.v1.ChannelRequest.topic_subscription_request:type_name -> push.v1.TopicSubscriptionRequest
	8,  // 3: push.v1.ChannelRequest.topic_unsubscription_request:type_name -> push.v1.TopicUnsubscriptionRequest
	4,  // 4: push.v1.ChannelResponse.connect_ack:type_name -> push.v1.ConnectAck
	3,  // 5: push.v1.ChannelResponse.channel_event:type_name -> push.v1.ChannelEvent
	5,  // 6: push.v1.ChannelResponse.channel_event_ack:type_name -> push.v1.ChannelEventAck
	7,  // 7: push.v1.ChannelResponse.topic_subscription_request_ack:type_name -> push.v1.TopicSubscriptionRequestAck
	9,  // 8: push.v1.ChannelResponse.topic_unsubscription_request_ack:type_name -> push.v1.TopicUnsubscriptionRequestAck
	20, // 9: push.v1.ChannelEvent.event:type_name -> push.v1.Event
	21, // 10: push.v1.ConnectAck.status:type_name -> push.v1.ResponseStatus
	21, // 11: push.v1.ChannelEventAck.status:type_name -> push.v1.ResponseStatus
	21, // 12: push.v1.TopicSubscriptionRequestAck.status:type_name -> push.v1.ResponseStatus
	21, // 13: push.v1.TopicUnsubscriptionRequestAck.status:type_name -> push.v1.ResponseStatus
	21, // 14: push.v1.GetClientActiveDevicesResponse.status:type_name -> push.v1.ResponseStatus
	22, // 15: push.v1.GetClientActiveDevicesResponse.devices:type_name -> push.v1.Device
	20, // 16: push.v1.SendEventToClientChannelRequest.event:type_name -> push.v1.Event
	21, // 17: push.v1.SendEventToClientChannelResponse.status:type_name -> push.v1.ResponseStatus
	20, // 18: push.v1.SendEventToClientDeviceChannelRequest.event:type_name -> push.v1.Event
	21, // 19: push.v1.SendEventToClientDeviceChannelResponse.status:type_name -> push.v1.ResponseStatus
	20, // 20: push.v1.SendEventToTopicRequest.event:type_name -> push.v1.Event
	21, // 21: push.v1.SendEventToTopicResponse.status:type_name -> push.v1.ResponseStatus
	16, // 22: push.v1.SendEventToTopicsRequest.requests:type_name -> push.v1.SendEventToTopicRequest
	21, // 23: push.v1.SendEventToTopicsResponse.status:type_name -> push.v1.ResponseStatus
	0,  // 24: push.v1.Event.format_type:type_name -> push.v1.Event.Type
	25, // 25: push.v1.Event.data:type_name -> google.protobuf.Any
	23, // 26: push.v1.ResponseStatus.message:type_name -> push.v1.ResponseStatus.MessageEntry
	26, // 27: push.v1.Device.logged_in_at:type_name -> google.protobuf.Timestamp
	24, // 28: push.v1.Device.attributes:type_name -> push.v1.Device.AttributesEntry
	1,  // 29: push.v1.PushService.Channel:input_type -> push.v1.ChannelRequest
	12, // 30: push.v1.PushService.SendEventToClientChannel:input_type -> push.v1.SendEventToClientChannelRequest
	14, // 31: push.v1.PushService.SendEventToClientDeviceChannel:input_type -> push.v1.SendEventToClientDeviceChannelRequest
	16, // 32: push.v1.PushService.SendEventToTopic:input_type -> push.v1.SendEventToTopicRequest
	18, // 33: push.v1.PushService.SendEventToTopics:input_type -> push.v1.SendEventToTopicsRequest
	10, // 34: push.v1.PushService.GetClientActiveDevices:input_type -> push.v1.GetClientActiveDevicesRequest
	2,  // 35: push.v1.PushService.Channel:output_type -> push.v1.ChannelResponse
	13, // 36: push.v1.PushService.SendEventToClientChannel:output_type -> push.v1.SendEventToClientChannelResponse
	15, // 37: push.v1.PushService.SendEventToClientDeviceChannel:output_type -> push.v1.SendEventToClientDeviceChannelResponse
	17, // 38: push.v1.PushService.SendEventToTopic:output_type -> push.v1.SendEventToTopicResponse
	19, // 39: push.v1.PushService.SendEventToTopics:output_type -> push.v1.SendEventToTopicsResponse
	11, // 40: push.v1.PushService.GetClientActiveDevices:output_type -> push.v1.GetClientActiveDevicesResponse
	35, // [35:41] is the sub-list for method output_type
	29, // [29:35] is the sub-list for method input_type
	29, // [29:29] is the sub-list for extension type_name
	29, // [29:29] is the sub-list for extension extendee
	0,  // [0:29] is the sub-list for field type_name
}

func init() { file_push_v1_api_proto_init() }
func file_push_v1_api_proto_init() {
	if File_push_v1_api_proto != nil {
		return
	}
	file_push_v1_api_proto_msgTypes[0].OneofWrappers = []any{
		(*ChannelRequest_ChannelEvent)(nil),
		(*ChannelRequest_ChannelEventAck)(nil),
		(*ChannelRequest_TopicSubscriptionRequest)(nil),
		(*ChannelRequest_TopicUnsubscriptionRequest)(nil),
	}
	file_push_v1_api_proto_msgTypes[1].OneofWrappers = []any{
		(*ChannelResponse_ConnectAck)(nil),
		(*ChannelResponse_ChannelEvent)(nil),
		(*ChannelResponse_ChannelEventAck)(nil),
		(*ChannelResponse_TopicSubscriptionRequestAck)(nil),
		(*ChannelResponse_TopicUnsubscriptionRequestAck)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_push_v1_api_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   24,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_push_v1_api_proto_goTypes,
		DependencyIndexes: file_push_v1_api_proto_depIdxs,
		EnumInfos:         file_push_v1_api_proto_enumTypes,
		MessageInfos:      file_push_v1_api_proto_msgTypes,
	}.Build()
	File_push_v1_api_proto = out.File
	file_push_v1_api_proto_rawDesc = nil
	file_push_v1_api_proto_goTypes = nil
	file_push_v1_api_proto_depIdxs = nil
}
