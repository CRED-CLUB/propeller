// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: push/v1/api.proto

package v1_pushv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PushService_Channel_FullMethodName                        = "/push.v1.PushService/Channel"
	PushService_SendEventToClientChannel_FullMethodName       = "/push.v1.PushService/SendEventToClientChannel"
	PushService_SendEventToClientDeviceChannel_FullMethodName = "/push.v1.PushService/SendEventToClientDeviceChannel"
	PushService_SendEventToTopic_FullMethodName               = "/push.v1.PushService/SendEventToTopic"
	PushService_SendEventToTopics_FullMethodName              = "/push.v1.PushService/SendEventToTopics"
	PushService_GetClientActiveDevices_FullMethodName         = "/push.v1.PushService/GetClientActiveDevices"
)

// PushServiceClient is the client API for PushService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// PushService is used to push events to and from the client
type PushServiceClient interface {
	// Establish channel
	Channel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChannelRequest, ChannelResponse], error)
	// SendEventToClientChannel is called to send event to a client
	SendEventToClientChannel(ctx context.Context, in *SendEventToClientChannelRequest, opts ...grpc.CallOption) (*SendEventToClientChannelResponse, error)
	// SendEventToClientDeviceChannel is called to send event to a client device
	SendEventToClientDeviceChannel(ctx context.Context, in *SendEventToClientDeviceChannelRequest, opts ...grpc.CallOption) (*SendEventToClientDeviceChannelResponse, error)
	// SendEventToTopic is called to send event to a topic
	SendEventToTopic(ctx context.Context, in *SendEventToTopicRequest, opts ...grpc.CallOption) (*SendEventToTopicResponse, error)
	// SendEventToTopics is called to send event to multiple topics
	SendEventToTopics(ctx context.Context, in *SendEventToTopicsRequest, opts ...grpc.CallOption) (*SendEventToTopicsResponse, error)
	// GetClientActiveDevices is called to get active devices of a client
	GetClientActiveDevices(ctx context.Context, in *GetClientActiveDevicesRequest, opts ...grpc.CallOption) (*GetClientActiveDevicesResponse, error)
}

type pushServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPushServiceClient(cc grpc.ClientConnInterface) PushServiceClient {
	return &pushServiceClient{cc}
}

func (c *pushServiceClient) Channel(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChannelRequest, ChannelResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PushService_ServiceDesc.Streams[0], PushService_Channel_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChannelRequest, ChannelResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushService_ChannelClient = grpc.BidiStreamingClient[ChannelRequest, ChannelResponse]

func (c *pushServiceClient) SendEventToClientChannel(ctx context.Context, in *SendEventToClientChannelRequest, opts ...grpc.CallOption) (*SendEventToClientChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEventToClientChannelResponse)
	err := c.cc.Invoke(ctx, PushService_SendEventToClientChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) SendEventToClientDeviceChannel(ctx context.Context, in *SendEventToClientDeviceChannelRequest, opts ...grpc.CallOption) (*SendEventToClientDeviceChannelResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEventToClientDeviceChannelResponse)
	err := c.cc.Invoke(ctx, PushService_SendEventToClientDeviceChannel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) SendEventToTopic(ctx context.Context, in *SendEventToTopicRequest, opts ...grpc.CallOption) (*SendEventToTopicResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEventToTopicResponse)
	err := c.cc.Invoke(ctx, PushService_SendEventToTopic_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) SendEventToTopics(ctx context.Context, in *SendEventToTopicsRequest, opts ...grpc.CallOption) (*SendEventToTopicsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendEventToTopicsResponse)
	err := c.cc.Invoke(ctx, PushService_SendEventToTopics_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *pushServiceClient) GetClientActiveDevices(ctx context.Context, in *GetClientActiveDevicesRequest, opts ...grpc.CallOption) (*GetClientActiveDevicesResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetClientActiveDevicesResponse)
	err := c.cc.Invoke(ctx, PushService_GetClientActiveDevices_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PushServiceServer is the server API for PushService service.
// All implementations should embed UnimplementedPushServiceServer
// for forward compatibility.
//
// PushService is used to push events to and from the client
type PushServiceServer interface {
	// Establish channel
	Channel(grpc.BidiStreamingServer[ChannelRequest, ChannelResponse]) error
	// SendEventToClientChannel is called to send event to a client
	SendEventToClientChannel(context.Context, *SendEventToClientChannelRequest) (*SendEventToClientChannelResponse, error)
	// SendEventToClientDeviceChannel is called to send event to a client device
	SendEventToClientDeviceChannel(context.Context, *SendEventToClientDeviceChannelRequest) (*SendEventToClientDeviceChannelResponse, error)
	// SendEventToTopic is called to send event to a topic
	SendEventToTopic(context.Context, *SendEventToTopicRequest) (*SendEventToTopicResponse, error)
	// SendEventToTopics is called to send event to multiple topics
	SendEventToTopics(context.Context, *SendEventToTopicsRequest) (*SendEventToTopicsResponse, error)
	// GetClientActiveDevices is called to get active devices of a client
	GetClientActiveDevices(context.Context, *GetClientActiveDevicesRequest) (*GetClientActiveDevicesResponse, error)
}

// UnimplementedPushServiceServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPushServiceServer struct{}

func (UnimplementedPushServiceServer) Channel(grpc.BidiStreamingServer[ChannelRequest, ChannelResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Channel not implemented")
}
func (UnimplementedPushServiceServer) SendEventToClientChannel(context.Context, *SendEventToClientChannelRequest) (*SendEventToClientChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEventToClientChannel not implemented")
}
func (UnimplementedPushServiceServer) SendEventToClientDeviceChannel(context.Context, *SendEventToClientDeviceChannelRequest) (*SendEventToClientDeviceChannelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEventToClientDeviceChannel not implemented")
}
func (UnimplementedPushServiceServer) SendEventToTopic(context.Context, *SendEventToTopicRequest) (*SendEventToTopicResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEventToTopic not implemented")
}
func (UnimplementedPushServiceServer) SendEventToTopics(context.Context, *SendEventToTopicsRequest) (*SendEventToTopicsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendEventToTopics not implemented")
}
func (UnimplementedPushServiceServer) GetClientActiveDevices(context.Context, *GetClientActiveDevicesRequest) (*GetClientActiveDevicesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetClientActiveDevices not implemented")
}
func (UnimplementedPushServiceServer) testEmbeddedByValue() {}

// UnsafePushServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PushServiceServer will
// result in compilation errors.
type UnsafePushServiceServer interface {
	mustEmbedUnimplementedPushServiceServer()
}

func RegisterPushServiceServer(s grpc.ServiceRegistrar, srv PushServiceServer) {
	// If the following call pancis, it indicates UnimplementedPushServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PushService_ServiceDesc, srv)
}

func _PushService_Channel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PushServiceServer).Channel(&grpc.GenericServerStream[ChannelRequest, ChannelResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PushService_ChannelServer = grpc.BidiStreamingServer[ChannelRequest, ChannelResponse]

func _PushService_SendEventToClientChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventToClientChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).SendEventToClientChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_SendEventToClientChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).SendEventToClientChannel(ctx, req.(*SendEventToClientChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_SendEventToClientDeviceChannel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventToClientDeviceChannelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).SendEventToClientDeviceChannel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_SendEventToClientDeviceChannel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).SendEventToClientDeviceChannel(ctx, req.(*SendEventToClientDeviceChannelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_SendEventToTopic_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventToTopicRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).SendEventToTopic(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_SendEventToTopic_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).SendEventToTopic(ctx, req.(*SendEventToTopicRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_SendEventToTopics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendEventToTopicsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).SendEventToTopics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_SendEventToTopics_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).SendEventToTopics(ctx, req.(*SendEventToTopicsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PushService_GetClientActiveDevices_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetClientActiveDevicesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PushServiceServer).GetClientActiveDevices(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PushService_GetClientActiveDevices_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PushServiceServer).GetClientActiveDevices(ctx, req.(*GetClientActiveDevicesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PushService_ServiceDesc is the grpc.ServiceDesc for PushService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PushService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "push.v1.PushService",
	HandlerType: (*PushServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendEventToClientChannel",
			Handler:    _PushService_SendEventToClientChannel_Handler,
		},
		{
			MethodName: "SendEventToClientDeviceChannel",
			Handler:    _PushService_SendEventToClientDeviceChannel_Handler,
		},
		{
			MethodName: "SendEventToTopic",
			Handler:    _PushService_SendEventToTopic_Handler,
		},
		{
			MethodName: "SendEventToTopics",
			Handler:    _PushService_SendEventToTopics_Handler,
		},
		{
			MethodName: "GetClientActiveDevices",
			Handler:    _PushService_GetClientActiveDevices_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Channel",
			Handler:       _PushService_Channel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "push/v1/api.proto",
}
